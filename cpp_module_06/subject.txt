Глава I
Общий порядок
• Любая функция, реализованная в заголовке (за исключением шаблонов), и любой незащищенный заголовок означают 0 для упражнения.
• Каждый вывод переходит в стандартный вывод и заканчивается новой строкой, если не указано иное.
• За введенными именами файлов необходимо следовать до буквы, а также за именами классов, функций и методов.
• Помните: теперь вы кодируете на C++, а не на C больше. Следовательно:
    ◦ Следующие функции запрещены, и их использование будет наказано 0, без вопросов: *alloc, *printf и free.
    ◦ Вы можете использовать практически все, что есть в стандартной библиотеке. Однако было бы разумно попробовать использовать C++-версии функций, к которым вы привыкли в C, вместо того чтобы просто придерживаться того, что вы знаете, в конце концов, это новый язык. И нет, вам не разрешается использовать STL, пока вы на самом деле не должны это делать (то есть до модуля 08). Это означает, что нет векторов/списков/карт/и т. д... или все, что требует включения <алгоритма> до тех пор.
• На самом деле, использование любой явно запрещенной функции или механики будет наказываться 0, никаких вопросов не задавалось.
• Также обратите внимание, что если не указано иное, ключевые слова C++ "using namespace" и "friend" запрещены. Их использование будет наказано а-42, никаких вопросов.
• Файлы, связанные с классом, всегда будут иметь значение "ClassName.hpp" и "ClassName.cpp", если не указано иное.
• Turn-in directories are ex00/, ex01/, . . . , exn/.
• Вы должны внимательно прочитать примеры. Они могут содержать требования, которые не очевидны в описании упражнения. Если что-то кажется двусмысленным, вы недостаточно понимаете C++.
• Поскольку вам разрешено использовать инструменты C++, о которых вы узнали с самого начала, вы не можете использовать какую-либо внешнюю библиотеку. И прежде чем вы спросите, это также означает, что нет C++11 и производных, ни Boost, ни чего-то еще, без чего ваш потрясающе опытный друг сказал вам, что C++ не может существовать.
• От вас может потребоваться сдать значительное количество классов. Это может показаться утомительным, если вы не можете написать сценарий своего любимого текстового редактора.
• Прочитайте каждое упражнение полностью, прежде чем начать его! Действительно сделать это.
• The compiler to use is clang++.
• Your code has to be compiled with the following flags : -Wall -Wextra -Werror.
• Каждый из ваших включений должен быть способен включаться независимо от других. Обязательные содержит все остальные входят они в зависимости от того, очевидно.
• На случай, если вам интересно, никакой стиль кодирования не применяется во время работы в C++. Вы можете использовать любой стиль, который вам нравится, без ограничений. Но помните, что код, который ваш эксперт не может прочитать,-это код, который он или она не могут оценить.
• Теперь важный момент : Вы не будете оцениваться программой, если только это не будет прямо указано в предмете. Поэтому вам предоставляется определенная свобода в том, как вы решите выполнять упражнения. Однако помните об ограничениях каждого упражнения, и не ленитесь, вы упустите многое из того, что они могут предложить !
• Это не проблема иметь некоторые посторонние файлы в том, что вы включаете, вы можете выбрать, чтобы разделить ваш код в большем количестве файлов, чем то, что от вас требуется. Не стесняйтесь, так как до тех пор, пока результат не будет оценен программой.
• Даже если тема упражнения коротка, стоит потратить на нее некоторое время, чтобы быть абсолютно уверенным, что вы понимаете, чего от вас ждут, и что вы сделали это наилучшим образом.
____________________________________________________________________________________________________________________________
Глава 2
Бонусные правила

Для каждого упражнения, любая случайная ситуация решается конкретным cast. Оценка будет проверена если вы выбрали соответствующий ожидаемый cast.
____________________________________________________________________________________________________________________________
Exercise 00: Scalar conversion

Turn-in directory :ex00/
Files to turn in :Any file you need and a Makefile
Allowed functions : Любые функции конвертации из строки в инт, флоат или дабл. Это поможет, но не сделает всю работу.

Напишите программу которая принимает строку в представлении С++ литерального значения (в своей наиболее распространенной форме) как парметр. Этот литерал должен принадлежать одному из следующих скалярных типо: char, int, float or double. Будет использоваться только десятичная система счисления.

Например char литеральное значение: 'c', 'a' ... Для упрощения, пожалуйста запишите это: не отображаемые символы не могут быть переданы в качестве параметра вашей программе, и если преобразование в символ не отображается, вместо этого выведите уведомление.

Например int литеральное значение: 0, -42, 42...
Например float литеральное значение: 0.0f, -4.2f, 4.2f... Вы также примете эти псевдо-литералы, как вы знаете, для науки: -inff, +inff and nanf.
Например double литеральное значение: 0.0,-4.2,4.2... Вы также примете эти псевдо-литералы, как вы знаете, для прикола: -inf, +inf and nan.
Ваша программа должна обнаружить литеральный тип, преобразуйте этот литерал в правильный тип (итак это больше не строка), затем преобразуйте его явно в каждый из трех других типов и отобразите результат использования того же форматирования, что и ниже. Если преобразование не имеет смысла или переполняется, покажите, что преобразование невозможно. Вы можете включить любой заголовок, необходимый для обработки числовых ограничений и специальных значений. 